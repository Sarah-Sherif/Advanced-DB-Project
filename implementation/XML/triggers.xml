declare function local:increment-employee($centerID as xs:string) {
    let $updatedCenter := update value //Service_Center[Center_ID = $centerID]/NO_of_Employees + 1
    return $updatedCenter
};


declare function local:update-employee-change-center($oldCenterID as xs:string, $newCenterID as xs:string) {
    if ($oldCenterID ne $newCenterID) then (
        let $oldCenter := update value //Service_Center[Center_ID = $oldCenterID]/NO_of_Employees - 1
        let $newCenter := update value //Service_Center[Center_ID = $newCenterID]/NO_of_Employees + 1
        return ($oldCenter, $newCenter)
    ) else ()
};


declare function local:decrement-employee($centerID as xs:string) {
    let $employeeCount := data(//Service_Center[Center_ID = $centerID]/NO_of_Employees)
    if ($employeeCount eq 1) then (
        delete node //Service_Center[Center_ID = $centerID]
    ) else ()
};


declare function local:repair-order-price($orderID as xs:string, $price as xs:decimal) {
    let $updatedOrder := update value //Order[Order_ID = $orderID]/Total_Cost with $price
    return $updatedOrder
};


declare function local:update-repair-order-price($orderID as xs:string, $price as xs:decimal) {
    let $updatedOrder := update value //Order[Order_ID = $orderID]/Total_Cost with $price
    return $updatedOrder
};


declare function local:purchase-order-price($orderID as xs:string, $componentModel as xs:string, $quantity as xs:integer) {
    let $componentPrice := data(//Component[Model = $componentModel]/Price)
    let $updatedOrder := update value //Order[Order_ID = $orderID]/Total_Cost with $componentPrice * $quantity
    return $updatedOrder
};


declare function local:purchase-order-price-update($orderID as xs:string, $componentModel as xs:string, $quantity as xs:integer) {
    let $componentPrice := data(//Component[Model = $componentModel]/Price)
    let $updatedOrder := update value //Order[Order_ID = $orderID]/Total_Cost with $componentPrice * $quantity
    return $updatedOrder
};
